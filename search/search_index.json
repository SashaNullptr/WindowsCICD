{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CI/CD Systems for Windows What does this guide cover? This guide outlines a basic CI/CD system set-up suitable for use with Windows app development. Caveats This guide makes particular choices regarding what tools are used and how they are used. The choices made are certainly not the only options available.","title":"Home"},{"location":"#cicd-systems-for-windows","text":"","title":"CI/CD Systems for Windows"},{"location":"#what-does-this-guide-cover","text":"This guide outlines a basic CI/CD system set-up suitable for use with Windows app development.","title":"What does this guide cover?"},{"location":"#caveats","text":"This guide makes particular choices regarding what tools are used and how they are used. The choices made are certainly not the only options available.","title":"Caveats"},{"location":"environment/package_manager/","text":"Package Manager Windows generally favors GUI installers, which presents a fairly severe problem for CI/CD systems. In order to (somewhat) assuage this issue we will make use of a package manager--this will allow us to install and update packages programmatically. Chocolatey We will be using the de facto standard package manager for Windows-- Chocolatey . Installation Of course we also need a programmatic way to install Chocolatey itself. Fortunately we can do this pretty easily using the following PowerShell command. Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) After the install script runs, it is generally a good idea to make sure Chocolately is up to date. choco upgrade chocolatey","title":"Package Manager"},{"location":"environment/package_manager/#package-manager","text":"Windows generally favors GUI installers, which presents a fairly severe problem for CI/CD systems. In order to (somewhat) assuage this issue we will make use of a package manager--this will allow us to install and update packages programmatically.","title":"Package Manager"},{"location":"environment/package_manager/#chocolatey","text":"We will be using the de facto standard package manager for Windows-- Chocolatey .","title":"Chocolatey"},{"location":"environment/package_manager/#installation","text":"Of course we also need a programmatic way to install Chocolatey itself. Fortunately we can do this pretty easily using the following PowerShell command. Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) After the install script runs, it is generally a good idea to make sure Chocolately is up to date. choco upgrade chocolatey","title":"Installation"},{"location":"installers/innosetup/","text":"InnoSetup What is InnoSetup? InnoSetup is one of the most widely used packages for generating self-contained Windows installers, although not quite as popular as the Nullsoft Scriptable Installer . Installation Innosetup is available via Chocolatey and can be installed with the following command. choco install innosetup Programmatic Use of InnoSetup Installers Fortunately InnoSetup installers can also be programmatically installed without any additional tooling. Any InnoSetup installer can be run from the command line using setup.exe /$option0 /$option1 ... . While there are quite a few options available we will focus on the ones relevant to surpressing the GUI. Option Effect /silent Only display the progress bar /verysilent Suppress all GUI elements. /suppressmsgboxes Suppress message boxes (must be combined with silent or verysilent options) /nocancel Install process cannot be canceled /norestart Do not restart, even if doing so is required for the installation to take effect /dir=\"C:\\$DIR_NAME\" Override default install directory In general, the following command will be suitable for installing InnoSetup installers in headless environments. setup.exe /verysilent /suppressmsboxes /norestart","title":"InnoSetup"},{"location":"installers/innosetup/#innosetup","text":"","title":"InnoSetup"},{"location":"installers/innosetup/#what-is-innosetup","text":"InnoSetup is one of the most widely used packages for generating self-contained Windows installers, although not quite as popular as the Nullsoft Scriptable Installer .","title":"What is InnoSetup?"},{"location":"installers/innosetup/#installation","text":"Innosetup is available via Chocolatey and can be installed with the following command. choco install innosetup","title":"Installation"},{"location":"installers/innosetup/#programmatic-use-of-innosetup-installers","text":"Fortunately InnoSetup installers can also be programmatically installed without any additional tooling. Any InnoSetup installer can be run from the command line using setup.exe /$option0 /$option1 ... . While there are quite a few options available we will focus on the ones relevant to surpressing the GUI. Option Effect /silent Only display the progress bar /verysilent Suppress all GUI elements. /suppressmsgboxes Suppress message boxes (must be combined with silent or verysilent options) /nocancel Install process cannot be canceled /norestart Do not restart, even if doing so is required for the installation to take effect /dir=\"C:\\$DIR_NAME\" Override default install directory In general, the following command will be suitable for installing InnoSetup installers in headless environments. setup.exe /verysilent /suppressmsboxes /norestart","title":"Programmatic Use of InnoSetup Installers"},{"location":"installers/installaware/","text":"InstallAware What is InstallAware? InstallAware is a package for generating self-contained Windows installers. It comes in free and non-free variants, and generally seems to be less popular than other tools, such as NSIS and InnoSetup . While InstallAware is certainly not an ideal choice for generating packages, it is certainly possible that installers generated with this tool will appear in the wild and need to be installed programmatically. Installation Exactly how InstallAware is downloaded and installed depends on the particular product. Commandline Builings References Programmatic Use of InnoSetup Installers InstallAware installers can also be programmatically installed without any additional tooling. Any InstallAware installer can be run from the command line using setup.exe /$option0 /$option1 ... . There are a handful of options , but we will focus on the relevant flags for suppressing GUI elements. Option Effect /s Run the installer completely silently (no GUI elements at all) In general, the following command will be suitable for installing InstallAware installers in headless environments. setup.exe /s","title":"InstallAware"},{"location":"installers/installaware/#installaware","text":"","title":"InstallAware"},{"location":"installers/installaware/#what-is-installaware","text":"InstallAware is a package for generating self-contained Windows installers. It comes in free and non-free variants, and generally seems to be less popular than other tools, such as NSIS and InnoSetup . While InstallAware is certainly not an ideal choice for generating packages, it is certainly possible that installers generated with this tool will appear in the wild and need to be installed programmatically.","title":"What is InstallAware?"},{"location":"installers/installaware/#installation","text":"Exactly how InstallAware is downloaded and installed depends on the particular product.","title":"Installation"},{"location":"installers/installaware/#commandline-builings","text":"References","title":"Commandline Builings"},{"location":"installers/installaware/#programmatic-use-of-innosetup-installers","text":"InstallAware installers can also be programmatically installed without any additional tooling. Any InstallAware installer can be run from the command line using setup.exe /$option0 /$option1 ... . There are a handful of options , but we will focus on the relevant flags for suppressing GUI elements. Option Effect /s Run the installer completely silently (no GUI elements at all) In general, the following command will be suitable for installing InstallAware installers in headless environments. setup.exe /s","title":"Programmatic Use of InnoSetup Installers"},{"location":"provisioning/boxstarter/","text":"Boxstarter What is Boxstarter? Boxstarter provides a way to programmatically set-up Windows environments. This allows systems to be set-up by provisioning tools, and yields reproducible machine states. Installing Boxstarter Assuming Chocolately is installed, Boxstarter can be installed from an Admin Powershell instance with the following: choco install boxstarter The boxstarter package is a meta-package that will install the following components. * boxstarter.bootstrapper * boxstarter.winconfig * boxstarter * boxstarter.chocolatey * boxstarter.common","title":"Boxstarter"},{"location":"provisioning/boxstarter/#boxstarter","text":"","title":"Boxstarter"},{"location":"provisioning/boxstarter/#what-is-boxstarter","text":"Boxstarter provides a way to programmatically set-up Windows environments. This allows systems to be set-up by provisioning tools, and yields reproducible machine states.","title":"What is Boxstarter?"},{"location":"provisioning/boxstarter/#installing-boxstarter","text":"Assuming Chocolately is installed, Boxstarter can be installed from an Admin Powershell instance with the following: choco install boxstarter The boxstarter package is a meta-package that will install the following components. * boxstarter.bootstrapper * boxstarter.winconfig * boxstarter * boxstarter.chocolatey * boxstarter.common","title":"Installing Boxstarter"},{"location":"provisioning/jenkins/","text":"Jenkins What is Jenkins? Jenkins is the de facto standard free and open source CI/CD system. It is generally more hands-on to set up compared to commercial tools like Travis-CI, but it is extremely flexible and adaptable. Installation We will be running Jenkins as a Docker image, and thus installation will be through Docker. Note we will assume the target system is equipped with the Chocolately package manager. Install Docker First we will need to install docker itself. Fortunately this is a simple matter running the following commands in PowerShell: C:\\> choco install docker-toolbox To verify Docker installed successfully run C:\\> docker run hello-world To install Jenkins itself we will run the following command in a command prompt. docker run ^ --rm ^ -u root ^ -p 8080:8080 ^ -v jenkins-data:/var/jenkins_home ^ -v /var/run/docker.sock:/var/run/docker.sock ^ -v \"%HOMEPATH%\":/home ^ jenkinsci/blueocean","title":"Jenkins"},{"location":"provisioning/jenkins/#jenkins","text":"","title":"Jenkins"},{"location":"provisioning/jenkins/#what-is-jenkins","text":"Jenkins is the de facto standard free and open source CI/CD system. It is generally more hands-on to set up compared to commercial tools like Travis-CI, but it is extremely flexible and adaptable.","title":"What is Jenkins?"},{"location":"provisioning/jenkins/#installation","text":"We will be running Jenkins as a Docker image, and thus installation will be through Docker. Note we will assume the target system is equipped with the Chocolately package manager.","title":"Installation"},{"location":"provisioning/jenkins/#install-docker","text":"First we will need to install docker itself. Fortunately this is a simple matter running the following commands in PowerShell: C:\\> choco install docker-toolbox To verify Docker installed successfully run C:\\> docker run hello-world To install Jenkins itself we will run the following command in a command prompt. docker run ^ --rm ^ -u root ^ -p 8080:8080 ^ -v jenkins-data:/var/jenkins_home ^ -v /var/run/docker.sock:/var/run/docker.sock ^ -v \"%HOMEPATH%\":/home ^ jenkinsci/blueocean","title":"Install Docker"},{"location":"stages/","text":"Overview of Build Stages We will organize our CI/CD stages in the following way. Stage Description Image Build Build Docker/VMs for each supported platform. Unit Test Build and run unit test harness. Integration Tests Test how project interacts with other programs / components. Packaging Bundle project into package. Installation Tests Check compiled package to see if it installs properly on target platforms. Static Analysis Run style checking, linting, and code coverage tests. Documentation Generate code base and project docs. Pages Host project documentation as static site. Deploy Post compiled packages to a known location for internal/customer use.","title":"Overview"},{"location":"stages/#overview-of-build-stages","text":"We will organize our CI/CD stages in the following way. Stage Description Image Build Build Docker/VMs for each supported platform. Unit Test Build and run unit test harness. Integration Tests Test how project interacts with other programs / components. Packaging Bundle project into package. Installation Tests Check compiled package to see if it installs properly on target platforms. Static Analysis Run style checking, linting, and code coverage tests. Documentation Generate code base and project docs. Pages Host project documentation as static site. Deploy Post compiled packages to a known location for internal/customer use.","title":"Overview of Build Stages"},{"location":"stages/code_base_docs/","text":"Code Base Documentation Automatic code base documentation is a critical part of making Documentation Tools C# DocFX DocFX is one of the few .NET documentation tools that allows docs to be built programmatically in a fairly sane way. It also allows auto-generated content to be mixed with hand-written documentation. In many ways it feels like the .NET analog to the wonderful Python documentation generator Sphinx . Configuration DocFX relies on a main config file called docfx.json that contains most of the information about how the docs should be built, along with toc.yml files that define how a sub-module is structured. A minimal docfx.json and toc.yml that extracts all XML comments from a C# project and automatically generates documentation for each commented piece of code is shown below. doxfx.json { \"metadata\": [ { \"src\": [ { \"files\": [ \"practice_app/**.csproj\" ] } ], \"dest\": \"api\", \"disableGitFeatures\": false, \"disableDefaultFilter\": false } ], \"build\": { \"content\": [ { \"files\": [ \"api/**.yml\", \"api/index.md\" ] }, { \"files\": [ \"toc.yml\", \"*.md\" ] } ], \"resource\": [ { \"files\": [] } ], \"overwrite\": [ { \"files\": [], \"exclude\": [ \"obj/**\", \"_site/**\" ] } ], \"dest\": \"_site\", \"globalMetadataFiles\": [], \"fileMetadataFiles\": [], \"template\": [ \"default\" ], \"postProcessors\": [], \"markdownEngineName\": \"markdig\", \"noLangKeyword\": false, \"keepFileLink\": false, \"cleanupCacheHistory\": false, \"disableGitFeatures\": false } } toc.yml - name: Code Base Documentation href: api/ This config file will have DoxFX extract all comments from an app named pratice_app and generate YML and MarkDown files and place them in a directory named api . The generated files in api will then be used to make the final HTML docs, which will be placed in _site . Building A minimal script that will install DocFX and then use it to build documentation (suitable for CI/CD use) is shown below. Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) refreshenv choco install docfx -y docfx docfx.json","title":"Code Base Docs"},{"location":"stages/code_base_docs/#code-base-documentation","text":"Automatic code base documentation is a critical part of making","title":"Code Base Documentation"},{"location":"stages/code_base_docs/#documentation-tools","text":"","title":"Documentation Tools"},{"location":"stages/code_base_docs/#c","text":"","title":"C&#35;"},{"location":"stages/code_base_docs/#docfx","text":"DocFX is one of the few .NET documentation tools that allows docs to be built programmatically in a fairly sane way. It also allows auto-generated content to be mixed with hand-written documentation. In many ways it feels like the .NET analog to the wonderful Python documentation generator Sphinx .","title":"DocFX"},{"location":"stages/code_base_docs/#configuration","text":"DocFX relies on a main config file called docfx.json that contains most of the information about how the docs should be built, along with toc.yml files that define how a sub-module is structured. A minimal docfx.json and toc.yml that extracts all XML comments from a C# project and automatically generates documentation for each commented piece of code is shown below. doxfx.json { \"metadata\": [ { \"src\": [ { \"files\": [ \"practice_app/**.csproj\" ] } ], \"dest\": \"api\", \"disableGitFeatures\": false, \"disableDefaultFilter\": false } ], \"build\": { \"content\": [ { \"files\": [ \"api/**.yml\", \"api/index.md\" ] }, { \"files\": [ \"toc.yml\", \"*.md\" ] } ], \"resource\": [ { \"files\": [] } ], \"overwrite\": [ { \"files\": [], \"exclude\": [ \"obj/**\", \"_site/**\" ] } ], \"dest\": \"_site\", \"globalMetadataFiles\": [], \"fileMetadataFiles\": [], \"template\": [ \"default\" ], \"postProcessors\": [], \"markdownEngineName\": \"markdig\", \"noLangKeyword\": false, \"keepFileLink\": false, \"cleanupCacheHistory\": false, \"disableGitFeatures\": false } } toc.yml - name: Code Base Documentation href: api/ This config file will have DoxFX extract all comments from an app named pratice_app and generate YML and MarkDown files and place them in a directory named api . The generated files in api will then be used to make the final HTML docs, which will be placed in _site .","title":"Configuration"},{"location":"stages/code_base_docs/#building","text":"A minimal script that will install DocFX and then use it to build documentation (suitable for CI/CD use) is shown below. Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) refreshenv choco install docfx -y docfx docfx.json","title":"Building"},{"location":"virtualization/hyper_v/","text":"Hyper-V Hyper-V is a tool that allows Windows to function as a Type 1 hypervisor, in a roughly analagous way to KVM on Linux platforms. The following Windows variants support Hyper-V: Windows 10 Pro & Enterprise Windows 8 Pro & Enterprise Windows Server (R2 2008 and up) Enabling Hyper-V Run the following command via a Powershell 5.1 \u2020 terminal as Administrator: \u2020 Shell versioning does matter in this case. Powershell Core 6.0 will not work. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All Creating VMs Once Hyper-V support has been enabled two programs will be available; \"Hyper-V Quick Create\" and \"Hyper-V Manager\". \"Hyper-V Quick Create\", as the name implies, is the fastest way to start-up a new VM. VMs can be provisions from local .iso disk images, .vhd / .vhdx virtual hard drives, or via a Hyper-V gallery item (which will be discussed later). After selecting a virtual machine and hitting \"Creation Virtual Machine\" a VM will be kicked off. After the VM is successfully started, it can be connected to directly from the Quick Create tool. Managing Existing VMs Hyper-V Manager allows us to manage VMs that were created previously, either on our local machine or on a remote server. In order to control previously created local VMs we will need to open Hyper-V Manager with Admin rights. To use Hyper-V Manager we will need to connect to a Hyper-V server. For the most part this will be our local machine \u2014in this case we will use \"Actions\"\u2192 \"Hyper-V Manager\"\u2192\"Connect To Server...\" and select \"Local Computer\". Free-ish Windows Images for Testing One issue (not exclusive to Hyper-V) with using Windows guest machines is that each guest OS will require it's own license. This can make small-scale testing quite fiddley and somewhat expensive. However there are a few free-ish options for Windows VM development images. Windows 10 Enterprise Developer Environment Windows Internet Explorer/Edge Dev Images Windows Server Enterprise 2008 R2 Most of theses images have an evaluation license that expires after some number of days (90 or 180 usually). It should be noted that these images can be re-downloaded after their temporarily license expires, but this approach is not particularly suitable for production work.","title":"Hyper-V"},{"location":"virtualization/hyper_v/#hyper-v","text":"Hyper-V is a tool that allows Windows to function as a Type 1 hypervisor, in a roughly analagous way to KVM on Linux platforms. The following Windows variants support Hyper-V: Windows 10 Pro & Enterprise Windows 8 Pro & Enterprise Windows Server (R2 2008 and up)","title":"Hyper-V"},{"location":"virtualization/hyper_v/#enabling-hyper-v","text":"Run the following command via a Powershell 5.1 \u2020 terminal as Administrator: \u2020 Shell versioning does matter in this case. Powershell Core 6.0 will not work. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All","title":"Enabling Hyper-V"},{"location":"virtualization/hyper_v/#creating-vms","text":"Once Hyper-V support has been enabled two programs will be available; \"Hyper-V Quick Create\" and \"Hyper-V Manager\". \"Hyper-V Quick Create\", as the name implies, is the fastest way to start-up a new VM. VMs can be provisions from local .iso disk images, .vhd / .vhdx virtual hard drives, or via a Hyper-V gallery item (which will be discussed later). After selecting a virtual machine and hitting \"Creation Virtual Machine\" a VM will be kicked off. After the VM is successfully started, it can be connected to directly from the Quick Create tool.","title":"Creating VMs"},{"location":"virtualization/hyper_v/#managing-existing-vms","text":"Hyper-V Manager allows us to manage VMs that were created previously, either on our local machine or on a remote server. In order to control previously created local VMs we will need to open Hyper-V Manager with Admin rights. To use Hyper-V Manager we will need to connect to a Hyper-V server. For the most part this will be our local machine \u2014in this case we will use \"Actions\"\u2192 \"Hyper-V Manager\"\u2192\"Connect To Server...\" and select \"Local Computer\".","title":"Managing Existing VMs"},{"location":"virtualization/hyper_v/#free-ish-windows-images-for-testing","text":"One issue (not exclusive to Hyper-V) with using Windows guest machines is that each guest OS will require it's own license. This can make small-scale testing quite fiddley and somewhat expensive. However there are a few free-ish options for Windows VM development images. Windows 10 Enterprise Developer Environment Windows Internet Explorer/Edge Dev Images Windows Server Enterprise 2008 R2 Most of theses images have an evaluation license that expires after some number of days (90 or 180 usually). It should be noted that these images can be re-downloaded after their temporarily license expires, but this approach is not particularly suitable for production work.","title":"Free-ish Windows Images for Testing"}]}